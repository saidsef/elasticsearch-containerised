name: CI
on:
  push:
    branches:
      - master
    paths:
      - "Dockerfile"
      - "conf/**"
  pull_request:
    branches:
      - master
    paths:
      - "Dockerfile"
      - "conf/**"
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Check out repository code
      uses: actions/checkout@v2
    - name: Set Tag Name
      run: |
        echo "TAG=$(echo ${GITHUB_REF##*/})" >> $GITHUB_ENV
        echo "DATE=v$(echo `date +'%Y.%m'`)" >> $GITHUB_ENV
    - name: Login to DockerHub
      uses: docker/login-action@v1 
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    - name: Build and push Docker image - branch
      uses: docker/build-push-action@v2
      env:
        DOCKER_BUILDKIT: 1
      with:
        context: .
        push: true
        tags: docker.io/saidsef/elasticsearch:${{ env.TAG }}
    - name: Build and push Docker image - tag
      uses: docker/build-push-action@v2
      if: ${{ contains(github.ref, 'master') }}
      env:
        DOCKER_BUILDKIT: 1
      with:
        context: .
        push: true
        tags: docker.io/saidsef/elasticsearch:${{ env.DATE }}
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: docker.io/saidsef/elasticsearch:${{ env.TAG }}
        format: 'template'
        template: '@/contrib/sarif.tpl'
        output: 'trivy-results.sarif'
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v1
      with:
        sarif_file: 'trivy-results.sarif'

  k8s-test:
    runs-on: ubuntu-latest
    if: ${{ ! contains(github.ref, 'master') }}
    needs: [build]
    steps:
      - name: Create k8s Kind Cluster
        uses: helm/kind-action@v1.2.0
      - name: Check out repository code
        uses: actions/checkout@v2
      - name: Run K8s test
        run: |
          kubectl cluster-info
          export NS=`cat deployment/kustomization.yml  | grep namespace | awk '{ print $2 }'`
          if [ -z "$NS" ]; then
            export NS='storage'
          fi
          kubectl create namespace $NS
          kubectl kustomize deployment/ | kubectl apply -n $NS -f - 
          kubectl get all -n $NS